{"version":3,"sources":["serviceWorker.js","components/post2.jsx","Suggest.js","index.js"],"names":["Boolean","window","location","hostname","match","Component","Suggest","state","isLoading","users","error","this","fetchUsers","_this2","fetch","mode","then","response","json","data","setState","catch","_this$state","react_default","a","createElement","Fragment","Helmet","language","src","message","map","user","username","name","email","key","ReactDOM","render","Suggest_Suggest","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"4IAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,qHCNcC,mBCRCC,oNACjBC,MAAQ,CACJC,WAAW,EACXC,MAAO,GACPC,MAAO,yFAIPC,KAAKC,kDAGI,IAAAC,EAAAF,KAGTG,MAAM,yIAA0I,CAAEC,KAAM,YAEnJC,KAAK,SAAAC,GAAQ,OAAIA,EAASC,SAG1BF,KAAK,SAAAG,GAAI,OACNN,EAAKO,SAAS,CACVX,MAAOU,EACPX,WAAW,MAIlBa,MAAM,SAAAX,GAAK,OAAIG,EAAKO,SAAS,CAAEV,QAAOF,WAAW,uCAGjD,IAAAc,EAC+BX,KAAKJ,MAAjCC,EADHc,EACGd,UAAWC,EADda,EACcb,MAAOC,EADrBY,EACqBZ,MAC1B,OACIa,EAAAC,EAAAC,cAACF,EAAAC,EAAME,SAAP,KACIH,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAACE,EAAA,OAAD,KACIJ,EAAAC,EAAAC,cAAA,UAAQG,SAAS,aACbC,IAAI,2GAIhBN,EAAAC,EAAAC,cAAA,yBARJ,gDAUKf,EAAQa,EAAAC,EAAAC,cAAA,SAAIf,EAAMoB,SAAe,KAVtC,2BAYMtB,EAaMe,EAAAC,EAAAC,cAAA,wBAZJhB,EAAMsB,IAAI,SAAAC,GAAQ,IACNC,EAA0BD,EAA1BC,SAAUC,EAAgBF,EAAhBE,KAAMC,EAAUH,EAAVG,MACxB,OACIZ,EAAAC,EAAAC,cAAA,OAAKW,IAAKH,GACNV,EAAAC,EAAAC,cAAA,kBAAUS,GACVX,EAAAC,EAAAC,cAAA,2BAAmBU,GACnBZ,EAAAC,EAAAC,cAAA,sBAnDKpB,cCIrCgC,IAASC,OAAOf,EAAAC,EAAAC,cAACc,EAAD,MAAaC,SAASC,eAAe,SHyH/C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM5B,KAAK,SAAA6B,GACjCA,EAAaC","file":"static/js/main.7621127c.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","// Created by Manju Karthik Shivashankar\r\n// Dated 30th June 2019\r\n//import required libraries\r\nimport React, { Component } from 'react';\r\nimport { PowerSelect } from 'react-power-select'\r\nimport 'react-power-select/dist/react-power-select.css'\r\n//import './text-input-style.css';\r\n//import { AppRegistry, TextInput } from 'react-native';\r\n\r\n\r\n\r\n//define the main class\r\nclass Post2 extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        console.log(this.props);\r\n        this.state = {\r\n            file: [],\r\n            links: [],\r\n            selectedOption: []\r\n        };\r\n    }\r\n\r\n    handleChange = ({ option }) => {\r\n        this.setState({\r\n            selectedOption: option\r\n        })\r\n    }\r\n\r\n    onInputChange = (event) => {\r\n        let link = event.target.value;\r\n        console.log(\"text value is : \",event.target.value);\r\n        this.setState({ links: link })\r\n    }\r\n\r\n    imgCheck(k) {\r\n        let files = k.target.files;\r\n        console.log(\"uploaded files is :\", files);\r\n        this.setState({ file: files });\r\n        let reader = new FileReader();\r\n        reader.readAsDataURL(files[0]);\r\n\r\n        reader.onload = (k) => {\r\n            console.log(\"data read is :\", k.target.result);\r\n        }\r\n    }\r\n\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <h3> Test App for Post flow</h3>\r\n                <div>\r\n                    \r\n                    <label for=\"avatar\">Upload officer's picture (if any)</label>\r\n\r\n                    <input type=\"file\"\r\n                        id=\"avatar\" name=\"avatar\"\r\n                        accept=\"image/png, image/jpeg\"\r\n                        onChange={(k) => this.imgCheck(k)}\r\n                        required multiple\r\n                    />\r\n               \r\n                </div>\r\n                <div>\r\n                    <input\r\n                        type = \"text\"\r\n                        value={this.state.links}\r\n                        onChange={this.onInputChange}\r\n                    />\r\n                    \r\n                </div>\r\n\r\n                <div>\r\n                    <PowerSelect\r\n                        options={['React', 'Ember', 'Angular', 'Vue', 'Preact', 'Inferno']}\r\n                        selected={this.state.selectedOption}\r\n                        onChange={this.handleChange}\r\n                        required multiple\r\n                    />\r\n                </div>\r\n                <div>\r\n\r\n                </div>\r\n\r\n            </div>\r\n\r\n            );\r\n    }\r\n\r\n\r\n}\r\n\r\n\r\n//export the class that will render\r\nexport default Post2;","import React, { Component } from \"react\"\r\nimport { Helmet } from \"react-helmet\"\r\nimport Typekit from 'react-typekit'\r\n\r\nexport default class Suggest extends Component {\r\n    state = {\r\n        isLoading: true,\r\n        users: [],\r\n        error: null\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.fetchUsers();\r\n    } \r\n\r\n    fetchUsers() {\r\n        // Where we're fetching data from\r\n        //fetch('https://jsonplaceholder.typicode.com/users')\r\n        fetch('https://maps.googleapis.com/maps/api/place/autocomplete/json?key=AIzaSyAED7UuUyo4VvifNN4ofoTMFNXRXzQeUPo&input=Ohi&inputtype=textquery', { mode: 'no-cors' })\r\n            // We get the API response and receive data in JSON format...\r\n            .then(response => response.json())\r\n            //.then(response => console.log(response))\r\n            // ...then we update the users state\r\n            .then(data =>\r\n                this.setState({\r\n                    users: data,\r\n                    isLoading: false,\r\n                })\r\n            )\r\n            // Catch any errors we hit and update the app\r\n            .catch(error => this.setState({ error, isLoading: false }));\r\n    }\r\n\r\n    render() {\r\n        const { isLoading, users, error } = this.state;\r\n        return (\r\n            <React.Fragment>\r\n                < div >\r\n                    <Helmet>\r\n                        <script language=\"javascript\"\r\n                            src=\"https://maps.googleapis.com/maps/api/js?key=AIzaSyBQ50ftR-fEvQmSq-ZnNcNXHqvX6K_PDkU&libraries=places\"></script>\r\n                        \r\n                    </Helmet>\r\n                </div >\r\n                <h1>Random User</h1>\r\n                // Display a message if we encounter an error\r\n                {error ? <p>{error.message}</p> : null}\r\n                // Here's our data check\r\n                {!isLoading ? (\r\n                    users.map(user => {\r\n                        const { username, name, email } = user;\r\n                        return (\r\n                            <div key={username}>\r\n                                <p>Name: {name}</p>\r\n                                <p>Email Address: {email}</p>\r\n                                <hr />\r\n                            </div>\r\n                        );\r\n                    })\r\n                    // If there is a delay in data, let's let the user know it's loading\r\n                ) : (\r\n                        <h3>Loading...</h3>\r\n                    )}\r\n            </React.Fragment>\r\n        );\r\n    }\r\n\r\n}\r\n\r\n\r\n/*\r\nexport default class Suggest extends Component {\r\n    state = {\r\n        search: \"\",\r\n        value: \"\",\r\n    }\r\n\r\n    initService() {\r\n    var displaySuggestions = function (predictions, status) {\r\n        if (status != google.maps.places.PlacesServiceStatus.OK) {\r\n            alert(status);\r\n            return;\r\n        }\r\n\r\n        predictions.forEach(function (prediction) {\r\n            var li = document.createElement('li');\r\n            li.appendChild(document.createTextNode(prediction.description));\r\n            document.getElementById('results').appendChild(li);\r\n        });\r\n    };\r\n\r\n    var service = new google.maps.places.AutocompleteService();\r\n    service.getQueryPredictions({ input: 'ohi' }, displaySuggestions);\r\n}\r\n\r\n\r\n\r\nrender() {\r\n    const { search, value } = this.state\r\n    return (\r\n        <div id=\"right-panel\">\r\n            <p>Query suggestions for 'pizza near Syd':</p>\r\n            <ul id=\"results\"></ul>\r\n            < div >\r\n                <Helmet>\r\n                    <script language=\"javascript\"\r\n                        src=\"https://maps.googleapis.com/maps/api/js?key=AIzaSyBQ50ftR-fEvQmSq-ZnNcNXHqvX6K_PDkU&libraries=places&callback=initService\"></script>\r\n                    <script>try{Typekit.load({ async: true }) }catch(e){}</script>\r\n                </Helmet>\r\n            </div >\r\n\r\n        </div>\r\n\r\n    );\r\n}\r\n};\r\n*/","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport Post2 from './components/post2.jsx';\r\n//import App from './App'\r\nimport Suggest from './Suggest' \r\n\r\nReactDOM.render(<Suggest />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n\r\n/* global google */\r\n/*\r\nimport React, { Component } from 'react';\r\nimport { render } from 'react-dom';\r\nimport Autocomplete from \"./Autocomplete\";\r\n/* global google */\r\n//import './index.html'\r\n/*\r\nimport './style.css'\r\n\r\nclass App extends Component {\r\n    state = {\r\n        place: {}\r\n    };\r\n\r\n\r\n    showPlaceDetails(place) {\r\n        this.setState({ place });\r\n    }\r\n\r\n    render() {\r\n\r\n        const AddressDetails = props => {\r\n            return (\r\n                <div>\r\n                    <pre>{JSON.stringify(props.place, null, 2)}</pre>\r\n                </div>\r\n            )\r\n        };\r\n\r\n        return (\r\n            <div>\r\n                <Autocomplete onPlaceChanged={this.showPlaceDetails.bind(this)} />\r\n                <AddressDetails place={this.state.place} />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nrender(<App />, document.getElementById('root'));\r\n*/"],"sourceRoot":""}